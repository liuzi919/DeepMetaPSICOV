#!/bin/bash
maindir=$(dirname $0)

## Helper script to run DeepMetaPSICOV, v1.0
## Shaun Kandathil, 2018

# User variables

# python executable with required modules
python=/home/camp/kandats/working/DMP/miniconda2/bin/python

# Location of default HHblits database (e.g. UniClust30)
hhblits_db=$maindir/data/hhsuite/uniclust30_2017_10/uniclust30_2017_10

# Location of HH-suite and binaries
hhdir=${maindir}/hh-suite-patched
hhbindir=${maindir}/bin

# number of threads to use in various programs
psiblast_threads=4
hhblits_threads=4
psicov_threads=6
ccmpred_threads=6
freecontact_threads=8

# End of user variables

help_text="""
usage: $0 [-h] -i input_fasta [-o contact_file] [-m mtx_file]

DeepMetaPSICOV (DMP) v1.0 by Shaun M. Kandathil and David T. Jones

required arguments:
  -i input_fasta, --input-fasta input_fasta
                        FASTA-formatted file with target sequence.
optional arguments:
  -h, --help            show this help message and exit.
  --force               Force generation of ALL intermediate files and contacts, even if these already exist. By default, existing intermediate files are reused.
  -a input_alignment, --input-aln input_alignment
                        Path to input alignment in PSICOV format.
                        If supplied, alignment generation steps will be skipped unless --force is also specified.
  -m mtx_file, --psiblast-mtx mtx_file
                        Path to legacy PSI-BLAST PSSM file generated by 'makemat -P' for target sequence (extension .mtx).
                        If supplied, PSI-BLAST will not be run.
  -o contact_file, --output-file contact_file
                        Filename for output contacts in CASP format.
                        The default is to create a file with the extension '.deepmetapsicov.con' and the basename of the input file.
"""

# other options:
# cleanup
# use deeper model
# use hhblits(default) or jack_hhblits for aln gen (only if -a not supplied)
# do domain parsing

if [ -z "$*" ]; then
    printf "$help_text"
    exit 0
fi

# parse args
force=0
while [[ $# -ge 1 ]]
do
    key="$1"

    case $key in
        -h|--help)
            echo "$help_text"
            exit 0
            ;;
        -m|--psiblast-mtx)
            mtxfile="$2"
            shift # extra shift since this arg has a value
            ;;
        -a|--input-aln)
            input_aln="$2"
            shift
            ;;
	-i|--input-fasta)
	    input_fasta="$2"
	    shift
	    ;;
        -o|--output-file)
            output_file="$2"
            shift
            ;;
	--force)
	    force=1
	    ;;
        *)
            # process any other argument not specified above.
            # cannot recognise when such an argument also has a value e.g. -f <filename>
            # but we'll treat that value as another (hopefully unrecognised) argument.
            echo "$0 : Warning: unrecognised option $key will be ignored." >&2
            ;;
    esac
    shift # this is the "default" shift
done

### check args
# At a minimum, user must must supply fasta sequence.
# TODO If aln and fasta are supplied, use supplied fasta but check length of seq matches aln. 
# TODO could check for sequence presence in aln too.

if [ -z $input_fasta ]; then
    echo "$0: ERROR: you must supply a FASTA file with your target sequence using the -i option." >&2
    exit 1
elif [ ! -s $input_fasta ]; then
    echo "$0: ERROR: supplied FASTA file $input_fasta not found or is empty." >&2
    exit 1
fi

prefix=$(basename $input_fasta | cut -d '.' -f 1)  # stops at the first '.'
tempdir=$(dirname $input_fasta)

no_aln=0
if [ -z $input_aln ]; then
    no_aln=1  # We will run HHblits etc to make the input aln
elif [ ! -s $input_aln ]; then
    echo "$0: ERROR: supplied alignment $input_aln not found or is empty." >&2
    exit 1
fi


if [ -z $output_file ]; then
    output_file=$tempdir/$prefix.deepmetapsicov.con
fi

# function make_fasta_from_aln() {
#     aln=$1
#     fasta=$2
#     bn=$(basename $aln | cut -d '.' -f 1)
#     echo ">$bn" > $fasta
#     head -n 1 $aln >> $fasta
# }

set -u

ulimit -s unlimited  # need this for alnstats (and possibly others)

bindir=${maindir}/bin

deepdir=$maindir/deepmetapsicov_consens

export BLASTMAT=${maindir}/data/blast
export BLASTDB=${maindir}/data/blast
export HHLIB=${hhdir}

## Run (legacy) PSI-BLAST and makemat if needed

if [ $force == 1 ] || [ ! -s $tempdir/$prefix.mtx ]; then
    run_psiblast=1

    if [ ! $force ] && [ -s $tempdir/$prefix.blast ] && [ -s $tempdir/$prefix.chk ]; then
	diff -q $maindir/psiblast-tail-check <(tail -n 7 $tempdir/$prefix.blast | cut -c 1-3) >/dev/null
	if [ $? == 0 ]; then
	    run_psiblast=0
	    echo "Using previous PSI-BLAST .blast and .chk files."
	fi
    fi

    if [ $run_psiblast == 1 ]; then
	echo "Running PSI-BLAST..."
	$bindir/blastpgp -a $psiblast_threads -b 0 -v 2000 -j 3 -h 0.001 -e 0.001 -d $maindir/data/blast/nr -i $tempdir/$prefix.fasta -C $tempdir/$prefix.chk > $tempdir/$prefix.blast
	if [ $? != 0 ]; then
	    echo "DMP ERROR 01 (PSI-BLAST failure) - please report error to psipred\@cs.ucl.ac.uk" >&2
	    exit 1
	fi
    fi

    echo "$prefix.chk" > $tempdir/$prefix.pn
    echo "$prefix.fasta" > $tempdir/$prefix.sn

    $bindir/makemat -P $tempdir/$prefix > /dev/null

    if [ $? != 0 ]; then
	echo "DMP ERROR 02 (makemat failure) - please report error to psipred\@cs.ucl.ac.uk" >&2
	exit 2
    fi
else
    echo "Using existing PSI-BLAST mtx file."
fi

## (Optionally) Make HHblits alignment.
if [ $force == 1] || [ $no_aln == 1 ]; then
    echo "Running HHblits..."
    $hhbindir/hhblits -i $tempdir/$prefix.fasta -n 3 -e 0.001 -d $hhblits_db -cpu $hhblits_threads -oa3m $tempdir/$prefix.a3m -diff inf -cov 50 -id 99 > $tempdir/$prefix.hhblog 2>&1
    if [ $? != 0 ]; then
	echo "DMP ERROR 03 (HHblits failure) - please report error to psipred\@cs.ucl.ac.uk" >&2
    fi
    
    grep -v '^>' $tempdir/$prefix.a3m | sed 's/[a-z]//g' > $tempdir/$prefix.hhbaln
    if [ $? != 0 ]; then
	echo "DMP ERROR 04 (shell cmd failure) - please report error to psipred\@cs.ucl.ac.uk" >&2
    fi

    seqlen = $(head -n 1 $tempdir/$prefix.hhbaln | wc -c)
    naln_hhblits = $(cat $tempdir/$prefix.hhbaln | wc -l)

    if (( naln_hhblits < 10 * seqlen )); then
	echo "WARNING: HHblits alignment has fewer sequences than recommended." >&2
	# at this point, we could script in jack_hhblits or some other intensive homology search procedure
    fi

    mv $tempdir/$prefix.hhbaln $tempdir/$prefix.aln
fi

##### Now we have aln and mtx; run DMP pipeline

# PSIPRED stage 1
if [ $force == 1 ] || [ ! -s $tempdir/$prefix.ss ]; then
    echo 'Running PSIPRED stage 1...'
    $bindir/psipred $tempdir/$prefix.mtx $maindir/data/psipred4/weights.dat $maindir/data/psipred/weights.dat2 $maindir/data/psipred/weights.dat3 > $tempdir/$prefix.ss
    if [ $? != 0 ]; then
	echo "DMP ERROR 06 (PSIPRED stage 1 failure) - please report error to psipred\@cs.ucl.ac.uk" >&2
	exit 6
    fi
else
    echo 'Using existing PSIPRED stage 1 file.'
fi

# PSIPRED stage 2
if [ $force == 1 ] || [ ! -s $tempdir/$prefix.ss2 ]; then
    echo 'Running PSIPRED stage 2...'
    $bindir/psipass2 $maindir/data/psipred4/weights_p2.dat 1 1.0 1.0 $tempdir/$prefix.ss2 $tempdir/$prefix.ss > /dev/null
    if [ $? != 0 ]; then
	echo "DMP ERROR 07 (PSIPRED stage 2 failure) - please report error to psipred\@cs.ucl.ac.uk" >&2
	exit 7
    fi
else
    echo 'Using existing PSIPRED stage 2 file.'
fi

# SOLVPRED
if [ $force == 1 ] || [ ! -s $tempdir/$prefix.solv ]; then
    echo 'Running SOLVPRED...'
    $bindir/solvpred $tempdir/$prefix.mtx $maindir/data/weights_solv.dat > $tempdir/$prefix.solv
    if [ $? != 0 ]; then
	echo "DMP ERROR 08 (SOLVPRED failure) - please report error to psipred\@cs.ucl.ac.uk" >&2
	exit 8
    fi
else
    echo 'Using existing SOLVPRED file.'
fi

# Alignment statistics (alnstats)
if [ $force == 1 ] || [ ! -s $tempdir/$prefix.colstats ] || [ ! -s $tempdir/$prefix.pairstats ]; then
    echo 'Running alnstats...'
    $bindir/alnstats $tempdir/$prefix.aln $tempdir/$prefix.colstats $tempdir/$prefix.pairstats > /dev/null
    if [ $? != 0 ]; then
	echo "DMP ERROR 09 (alnstats failure) - please report error to psipred\@cs.ucl.ac.uk" >&2
	exit 9
    fi
else
    echo 'Using existing alignment statistics files.'
fi

naln=$(cat $tempdir/$prefix.aln | wc -l)

if [ $naln -ge 5 ]; then  ## TODO update this block with --force etc
    # PSICOV
    if [ $force == 1 ] || [ ! -e $tempdir/$prefix.psicov ]; then
	echo "Running PSICOV..."
	timeout 86400 $bindir/psicov -z $psicov_threads -o -d 0.03 $tempdir/$prefix.aln > $tempdir/$prefix.psicov 2>&1
	psicovret=$?
	if [ $psicovret == 124 ]; then
	    echo 'PSICOV timed out. This is not a critical error.'
	elif [ $psicovret != 0 ]; then
	    echo "DMP ERROR 10 (PSICOV gave exit code $psicovret) - please report error to psipred\@cs.ucl.ac.uk" >&2
	    exit 10
	fi
    else
	echo "Using existing PSICOV predictions."
	if [ ! -s $tempdir/$psicov ]; then
	    echo "WARNING: PSICOV file is empty; possibly the result of a run that timed out." >&2
	fi
    fi

    # CCMpred
    if [ $force == 1 ] || [ ! -e $tempdir/$prefix.ccmpred ]; then
	echo "Running CCMpred..."
	timeout 86400 $bindir/ccmpred -t $ccmpred_threads $tempdir/$prefix.aln $tempdir/$prefix.ccmpred > /dev/null 2>&1
	ccmret=$?
	if [ $ccmret == 124 ]; then
	    echo 'CCMpred timed out. This is not a critical error.'
	elif [ $ccmret != 0 ]; then
	    echo "DMP ERROR 11 (CCMpred gave exit code $ccmret) - please report error to psipred\@cs.ucl.ac.uk" >&2
	    exit 11
	fi
    else
	echo "Using existing CCMpred predictions."
	if [ ! -s $tempdir/$ccmpred ]; then
	    echo "WARNING: CCMpred file is empty; possibly the result of a run that timed out." >&2
	fi
    fi	

    # FreeContact
    if [ $force == 1 ] || [ ! -e $tempdir/$prefix.freecontact ]; then    
	# no timeout on this one as it tends to be quick enough
	echo "Running FreeContact..."
	$bindir/freecontact -a $freecontact_threads < $tempdir/$prefix.aln > $tempdir/$prefix.freecontact
	if [ $? != 0 ]; then
	    echo "DMP ERROR 12 (freecontact failure) - please report error to psipred\@cs.ucl.ac.uk" >&2
	    exit 12
	fi
    else
	echo "Using existing FreeContact predictions."
	if [ ! -s $tempdir/$freecontact ]; then
	    echo "WARNING: FreeContact file is empty." >&2
	fi
    fi

else
    echo 'WARNING: alignment has too few sequences; PSICOV, CCMpred and FreeContact will not be run.' >&2
fi

touch $tempdir/$prefix.psicov $tempdir/$prefix.freecontact $tempdir/$prefix.ccmpred
if [ $? != 0 ]; then
    echo "DMP ERROR 13 (touch failure) - please report error to psipred\@cs.ucl.ac.uk" >&2
    exit 13
fi

# 60-channel 'map' inputs
if [ $force == 1 ] || [ ! -s $tempdir/$prefix.deepmetapsicov.map ] || [ ! -s $tempdir/$prefix.deepmetapsicov.fix ]; then
    echo 'Preparing DMP input files (1 of 2)...'
    $bindir/deepmetapsicov_makepredmap \
	$tempdir/$prefix.colstats \
	$tempdir/$prefix.pairstats \
	$tempdir/$prefix.psicov \
	$tempdir/$prefix.freecontact \
	$tempdir/$prefix.ccmpred \
	$tempdir/$prefix.ss2 \
	$tempdir/$prefix.solv \
	$tempdir/$prefix.deepmetapsicov.map \
	$tempdir/$prefix.deepmetapsicov.fix > /dev/null 2>&1
    if [ $? != 0 ]; then
	echo "DMP ERROR 14 (makepredmap failure) - please report error to psipred\@cs.ucl.ac.uk" >&2
	exit 14
    fi
else
    echo 'Using existing DMP map input.'
fi

# 441-channel covariance inputs
if [ $force == 1 ] || [ ! -s $tempdir/$prefix.deepmetapsicov.21c ]; then
    echo 'Preparing DMP input files (2 of 2)...'
    $bindir/cov21stats $tempdir/$prefix.aln $tempdir/$prefix.deepmetapsicov.21c > /dev/null 2>&1
    if [ $? != 0 ]; then
	echo "DMP ERROR 15 (cov21stats failure) - please report error to psipred\@cs.ucl.ac.uk" >&2
	exit 15
    fi
else
    echo 'Using existing DMP covariances.'
fi

# Actually run the predictor. This is run regardless of --force.
echo 'Predicting contacts...'
$python $deepdir/pytorch_metacov_pred.py \
    $tempdir/$prefix.deepmetapsicov.21c \
    $tempdir/$prefix.deepmetapsicov.map > $output_file 2>&1
if [ $? != 0 ]; then
    echo "DMP ERROR 16 (DMP predictor failure) - please report error to psipred\@cs.ucl.ac.uk" >&2
    exit 16
fi

### Optional cleanup

echo 'Done.'


